/*
 * OpenSearch
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2021-11-23
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserDefinedObjectStructure {
  #[serde(
    rename = "bool",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub bool: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "boosting",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub boosting: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "combined_fields",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub combined_fields: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "constant_score",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub constant_score: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "dis_max",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub dis_max: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "distance_feature",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub distance_feature: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "exists",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub exists: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "function_score",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub function_score: Option<Option<serde_json::Value>>,
  #[serde(rename = "fuzzy", skip_serializing_if = "Option::is_none")]
  pub fuzzy: Option<::std::collections::HashMap<String, serde_json::Value>>,
  #[serde(
    rename = "geo_bounding_box",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub geo_bounding_box: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "geo_distance",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub geo_distance: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "geo_polygon",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub geo_polygon: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "geo_shape",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub geo_shape: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "has_child",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub has_child: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "has_parent",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub has_parent: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "ids",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub ids: Option<Option<serde_json::Value>>,
  #[serde(rename = "intervals", skip_serializing_if = "Option::is_none")]
  pub intervals: Option<::std::collections::HashMap<String, serde_json::Value>>,
  #[serde(
    rename = "knn",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub knn: Option<Option<serde_json::Value>>,
  #[serde(rename = "match", skip_serializing_if = "Option::is_none")]
  pub r#match: Option<::std::collections::HashMap<String, serde_json::Value>>,
  #[serde(
    rename = "match_all",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub match_all: Option<Option<serde_json::Value>>,
  #[serde(rename = "match_bool_prefix", skip_serializing_if = "Option::is_none")]
  pub match_bool_prefix: Option<::std::collections::HashMap<String, serde_json::Value>>,
  #[serde(
    rename = "match_none",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub match_none: Option<Option<serde_json::Value>>,
  #[serde(rename = "match_phrase", skip_serializing_if = "Option::is_none")]
  pub match_phrase: Option<::std::collections::HashMap<String, serde_json::Value>>,
  #[serde(rename = "match_phrase_prefix", skip_serializing_if = "Option::is_none")]
  pub match_phrase_prefix: Option<::std::collections::HashMap<String, serde_json::Value>>,
  #[serde(
    rename = "more_like_this",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub more_like_this: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "multi_match",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub multi_match: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "nested",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub nested: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "parent_id",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub parent_id: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "percolate",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub percolate: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "pinned",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub pinned: Option<Option<serde_json::Value>>,
  #[serde(rename = "prefix", skip_serializing_if = "Option::is_none")]
  pub prefix: Option<::std::collections::HashMap<String, serde_json::Value>>,
  #[serde(
    rename = "query_string",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub query_string: Option<Option<serde_json::Value>>,
  #[serde(rename = "range", skip_serializing_if = "Option::is_none")]
  pub range: Option<::std::collections::HashMap<String, serde_json::Value>>,
  #[serde(
    rename = "rank_feature",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub rank_feature: Option<Option<serde_json::Value>>,
  #[serde(rename = "regexp", skip_serializing_if = "Option::is_none")]
  pub regexp: Option<::std::collections::HashMap<String, serde_json::Value>>,
  #[serde(
    rename = "script",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub script: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "script_score",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub script_score: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "shape",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub shape: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "simple_query_string",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub simple_query_string: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "span_containing",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub span_containing: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "field_masking_span",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub field_masking_span: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "span_first",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub span_first: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "span_multi",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub span_multi: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "span_near",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub span_near: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "span_not",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub span_not: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "span_or",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub span_or: Option<Option<serde_json::Value>>,
  #[serde(rename = "span_term", skip_serializing_if = "Option::is_none")]
  pub span_term: Option<::std::collections::HashMap<String, serde_json::Value>>,
  #[serde(
    rename = "span_within",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub span_within: Option<Option<serde_json::Value>>,
  #[serde(rename = "term", skip_serializing_if = "Option::is_none")]
  pub term: Option<::std::collections::HashMap<String, serde_json::Value>>,
  #[serde(
    rename = "terms",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub terms: Option<Option<serde_json::Value>>,
  #[serde(rename = "terms_set", skip_serializing_if = "Option::is_none")]
  pub terms_set: Option<::std::collections::HashMap<String, serde_json::Value>>,
  #[serde(rename = "wildcard", skip_serializing_if = "Option::is_none")]
  pub wildcard: Option<::std::collections::HashMap<String, serde_json::Value>>,
  #[serde(
    rename = "wrapper",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub wrapper: Option<Option<serde_json::Value>>,
}

impl UserDefinedObjectStructure {
  pub fn new() -> UserDefinedObjectStructure {
    UserDefinedObjectStructure {
      bool: None,
      boosting: None,
      combined_fields: None,
      constant_score: None,
      dis_max: None,
      distance_feature: None,
      exists: None,
      function_score: None,
      fuzzy: None,
      geo_bounding_box: None,
      geo_distance: None,
      geo_polygon: None,
      geo_shape: None,
      has_child: None,
      has_parent: None,
      ids: None,
      intervals: None,
      knn: None,
      r#match: None,
      match_all: None,
      match_bool_prefix: None,
      match_none: None,
      match_phrase: None,
      match_phrase_prefix: None,
      more_like_this: None,
      multi_match: None,
      nested: None,
      parent_id: None,
      percolate: None,
      pinned: None,
      prefix: None,
      query_string: None,
      range: None,
      rank_feature: None,
      regexp: None,
      script: None,
      script_score: None,
      shape: None,
      simple_query_string: None,
      span_containing: None,
      field_masking_span: None,
      span_first: None,
      span_multi: None,
      span_near: None,
      span_not: None,
      span_or: None,
      span_term: None,
      span_within: None,
      term: None,
      terms: None,
      terms_set: None,
      wildcard: None,
      wrapper: None,
    }
  }
}
