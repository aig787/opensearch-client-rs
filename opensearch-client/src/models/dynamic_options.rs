/*
 * OpenSearch
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2021-11-23
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DynamicOptions {
  #[serde(rename = "filteredAliasMode", skip_serializing_if = "Option::is_none")]
  pub filtered_alias_mode: Option<String>,
  #[serde(rename = "disableRestAuth", skip_serializing_if = "Option::is_none")]
  pub disable_rest_auth: Option<bool>,
  #[serde(rename = "disableIntertransportAuth", skip_serializing_if = "Option::is_none")]
  pub disable_intertransport_auth: Option<bool>,
  #[serde(rename = "respectRequestIndicesOptions", skip_serializing_if = "Option::is_none")]
  pub respect_request_indices_options: Option<bool>,
  #[serde(
    rename = "kibana",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub kibana: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "http",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub http: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "authc",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub authc: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "authz",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub authz: Option<Option<serde_json::Value>>,
  #[serde(
    rename = "authFailureListeners",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub auth_failure_listeners: Option<Option<serde_json::Value>>,
  #[serde(rename = "doNotFailOnForbidden", skip_serializing_if = "Option::is_none")]
  pub do_not_fail_on_forbidden: Option<bool>,
  #[serde(rename = "multiRolespanEnabled", skip_serializing_if = "Option::is_none")]
  pub multi_rolespan_enabled: Option<bool>,
  #[serde(rename = "hostsResolverMode", skip_serializing_if = "Option::is_none")]
  pub hosts_resolver_mode: Option<String>,
  #[serde(rename = "doNotFailOnForbiddenEmpty", skip_serializing_if = "Option::is_none")]
  pub do_not_fail_on_forbidden_empty: Option<bool>,
}

impl DynamicOptions {
  pub fn new() -> DynamicOptions {
    DynamicOptions {
      filtered_alias_mode: None,
      disable_rest_auth: None,
      disable_intertransport_auth: None,
      respect_request_indices_options: None,
      kibana: None,
      http: None,
      authc: None,
      authz: None,
      auth_failure_listeners: None,
      do_not_fail_on_forbidden: None,
      multi_rolespan_enabled: None,
      hosts_resolver_mode: None,
      do_not_fail_on_forbidden_empty: None,
    }
  }
}
